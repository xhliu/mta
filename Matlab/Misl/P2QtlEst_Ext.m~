%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%   Author: Xiaohui Liu (whulxh@gmail.com)
%   Data: 6/24/2010
%   Modified: 2/22/2011 preallocate
%   Function: Use P2 algorithm proposed by Raatikainen (1987) to estimate multiple
%   quantiles simultaneously
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% observations: input samples
% p: quantiles estimated
% markers: estimated qtls
% adjusts: magnitude in each individual change
function [markers, adjusts] = P2QtlEst_Ext(observations, p)
% # of quantiles
QTL_COUNTS = length(p);
% # of markers
MARKER_COUNTS = 2 * QTL_COUNTS + 3;
%marker heights & positions & desired positions & increment of desired
%positions
heights = zeros(MARKER_COUNTS, 1);
positions = zeros(MARKER_COUNTS, 1);
positions_prime = zeros(MARKER_COUNTS, 1);
delta_positions_prime = zeros(MARKER_COUNTS, 1);

%% Initilize
heights = sort(observations(1 : MARKER_COUNTS));

positions = 1 : MARKER_COUNTS;

delta_positions_prime(1) = 0;
delta_positions_prime(MARKER_COUNTS) = 1;
for i = 1 : QTL_COUNTS
    delta_positions_prime(2 * i + 1) = p(i);
end
for i = 1 : (QTL_COUNTS + 1)
    delta_positions_prime(2 * i) = (delta_positions_prime(2 * i - 1) + delta_positions_prime(2 * i + 1)) / 2;
end

for i = 1 : MARKER_COUNTS
    positions_prime(i) = 1 + 2 * (QTL_COUNTS + 1) * delta_positions_prime(i);
end


%% Update upon arrival of each new observation
% markers = cell(QTL_COUNTS, 1);
adjusts = zeros(length(observations), 1);
adjusts_cnts = 0;
for j = (MARKER_COUNTS + 1) : length(observations)
    x = observations(j);
%     disp(['Round ' num2str(j) ' with sample ' num2str(x)]);
    max = 0;
    % Find the cell x falls in
    if x < heights(1)   % min
        heights(1) = x;
        k = 1;
    else
        if x >= heights(MARKER_COUNTS) % max
            heights(MARKER_COUNTS) = x;
            k = MARKER_COUNTS - 1;
            max = 1;
        else
            for k = 1 : (MARKER_COUNTS - 1)
                if x < heights(k + 1)
                    break;
                end
            end
        end
    end
    
    % sanity check % k equal MARKER_COUNTS is exception
    if k < 1 || k > (MARKER_COUNTS - 1)
        disp('error: cell position out of bound');
    end
    if max
        if x ~= heights(k + 1)
            disp('error 1');
        end
    else
       if ~(x >= heights(k) && x < heights(k + 1))
           disp('error 2');
       end
    end
    % Increment positions of markers k + 1 through MARKER_COUNTS
    % and desired positions for all markers
%     for i = 1 : MARKER_COUNTS
%         if i >= (k + 1)
%             positions(i) = positions(i) + 1;
%         end
%         positions_prime(i) = positions_prime(i) + delta_positions_prime(i);
%     end
    positions(k + 1 : end) = positions(k + 1 : end) + 1;
    positions_prime = positions_prime + delta_positions_prime;

%     positions
%     disp('');
%     positions_prime
    
    % Adjust heights of markers if necessary
    for i = 2 : (MARKER_COUNTS - 1)
        d = positions_prime(i) - positions(i);
        dp = positions(i + 1) - positions(i);
        dm = positions(i - 1) - positions(i);
        qp = (heights(i + 1) - heights(i)) / dp;
        qm = (heights(i - 1) - heights(i)) / dm;
        
        if (d >= 1 && dp > 1)
            qt = heights(i) + ((1 - dm) * qp + (dp - 1) * qm) / (dp - dm);
            if qt > heights(i - 1) && qt < heights(i + 1)
                heights(i) = qt;
            else
                heights(i) = heights(i) + qp;
            end
            positions(i) = positions(i) + 1;
        else
            if (d <= -1 && dm < -1)
                qt = heights(i) - ((1 + dp) * qm - (dm + 1) * qp) / (dp - dm)
            end
        end
    end
%     for i = 2 : (MARKER_COUNTS - 1)
%         d = positions_prime(i) - positions(i);
%         if (((d >= 1) && ((positions(i + 1) - positions(i)) > 1))) || ...
%            (((d <= -1) && ((positions(i - 1) - positions(i)) < -1)))
%             d = sign(d);
%             new_height = parabola(i, d);
%             adjusts_cnts = adjusts_cnts + 1;
%             % if markers in order
%             if (new_height > heights(i - 1)) && (new_height < heights(i + 1))
% %                 fprintf('adjust by %f w/ parabolic\n', new_height - heights(i));
%                 adjusts(adjusts_cnts, :) = new_height - heights(i);
%                 heights(i) = new_height;
%             else
% %                 fprintf('adjust by %f w/ linear\n', linear(i, d) - heights(i));
%                 adjusts(adjusts_cnts, :) = linear(i, d) - heights(i);
%                 heights(i) = linear(i, d);
%             end
%             positions(i) = positions(i) + d;
% %             disp(['Maker ' num2str(i) ' adjusted  ' num2str(d) ' to height ' num2str(heights(i))]);
%         end
%     end
% end

    % odd markers contains the current estimation of the quantiles
    markers = zeros(QTL_COUNTS, 1);
    for i = 1 : QTL_COUNTS
        markers(i) = heights(2 * i + 1);
    end
    adjusts((adjusts_cnts + 1) : end, :) = [];
    
    %% nested functions
    %parabolic interpolation
    function y = parabola(i, d)
        y = heights(i) + d * ((positions(i) - positions(i - 1) + d) * (heights(i + 1) - heights(i)) / (positions(i + 1) - positions(i)) ...
                            + (positions(i + 1) - positions(i) - d) * (heights(i) - heights(i - 1)) / (positions(i) - positions(i - 1)))...
                            / (positions(i + 1) - positions(i - 1));
    end
    %linear interpolation
    function y = linear(i, d)
        y = heights(i) + d * (heights(i + d) - heights(i)) / (positions(i + d) - positions(i));
    end
end
    
    
    
    
    